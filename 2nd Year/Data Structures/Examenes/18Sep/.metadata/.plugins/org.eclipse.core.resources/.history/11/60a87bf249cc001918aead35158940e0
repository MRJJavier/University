package dataStructures.dictionary;
import dataStructures.list.List;

import dataStructures.list.ArrayList;
import dataStructures.set.AVLSet;
import dataStructures.set.Set;
import dataStructures.tuple.Tuple2;

/**
 * Estructuras de Datos. Grados en Informatica. UMA.
 * Examen de septiembre de 2018.
 *
 * Apellidos, Nombre:
 * Titulacion, Grupo:
 */
public class HashBiDictionary<K,V> implements BiDictionary<K,V>{
	private Dictionary<K,V> bKeys;
	private Dictionary<V,K> bValues;
	
	public HashBiDictionary() {
		// TODO 
		bKeys = new HashDictionary<>();
		bValues = new HashDictionary<>();
	}
	
	public boolean isEmpty() {
		// TODO
	
		return bKeys.isEmpty() && bValues.isEmpty();
	}
	
	public int size() {
		// TODO
		return (bKeys.size()+bValues.size())/2;
	}
	
	public void insert(K k, V v) {
		// TODO
		bKeys.insert(k, v);
		bValues.insert(v, k);
	}
	
	public V valueOf(K k) {
		// TODO
		if(isDefinedKeyAt(k))return bKeys.valueOf(k);
		return null;
	}
	
	public K keyOf(V v) {
		// TODO
		if(isDefinedValueAt(v))return bValues.valueOf(v);
		return null;
	}
	
	public boolean isDefinedKeyAt(K k) {
		return bKeys.isDefinedAt(k);
	}
	
	public boolean isDefinedValueAt(V v) {
		return bValues.isDefinedAt(v);
	}
	
	public void deleteByKey(K k) {
		// TODO
		if(isDefinedKeyAt(k)) {
			bValues.delete(bKeys.valueOf(k));
			bKeys.delete(k);
		}
	}
	
	public void deleteByValue(V v) {
		// TODO
		if(isDefinedValueAt(v)) {
			bKeys.delete(bValues.valueOf(v));
			bValues.delete(v);
		}
	}
	
	public Iterable<K> keys() {
		return bKeys.keys();
	}
	
	public Iterable<V> values() {
		return bValues.keys();
	}
	
	public Iterable<Tuple2<K, V>> keysValues() {
		return bKeys.keysValues();
	}
	
		
	public static <K,V extends Comparable<? super V>> BiDictionary<K, V> toBiDictionary(Dictionary<K,V> dict) {
		// TODO
		BiDictionary<K,V> bdict = new HashBiDictionary<>();
		for(Tuple2<K, V> tupleKv : dict.keysValues()) {
			//Solo compruebo la inyectividad de los valores porque las claves no se repiten.
			if(bdict.isDefinedValueAt(tupleKv._2())) throw new IllegalArgumentException("El diccionario pasado como parametro no es inyectivo.");
			bdict.insert(tupleKv._1(), tupleKv._2());
		}
		return bdict;
	}
	
	public <W> BiDictionary<K, W> compose(BiDictionary<V,W> bdic) {
		// TODO
		BiDictionary<K,W> bdict = new HashBiDictionary<>();
		for(V val : bdic.keys()) {
			if(isDefinedValueAt(val)) bdict.insert(keyOf(val), bdic.valueOf(val));
		}
		return bdict;
	}
		
	public static <K extends Comparable<? super K>> boolean isPermutation(BiDictionary<K,K> bd) {
		// TODO
		for(K key : bd.keys()) {
			if(!bd.isDefinedValueAt(key)) return false;
		}
		return true;
	}
	
	// Solo alumnos con evaluaciï¿½n por examen final.
    // =====================================
	
	public static <K extends Comparable<? super K>> List<K> orbitOf(K k, BiDictionary<K,K> bd) {
		List<K> list = new ArrayList<>();
		if(!bd.isDefinedKeyAt(k)) return null;
		list.append(k);
		K aux = bd.valueOf(k);
		bd.deleteByKey(k);
		while(k != aux) {
			list.append(aux);
			aux = bd.valueOf(aux);
			bd.deleteByKey(aux);
		}
		return list;
	}
	
	public static <K extends Comparable<? super K>> List<List<K>> cyclesOf(BiDictionary<K,K> bd) {
		// TODO
		List<List<K>> llist = new ArrayList<>();
		while(!bd.isEmpty()) {
			List<K> list = new ArrayList<>()
			for(K key : bd.keys()) {
				
			}
		}
		
		return null;
	}

    // =====================================
	
	
	@Override
	public String toString() {
		return "HashBiDictionary [bKeys=" + bKeys + ", bValues=" + bValues + "]";
	}
	
	
}
