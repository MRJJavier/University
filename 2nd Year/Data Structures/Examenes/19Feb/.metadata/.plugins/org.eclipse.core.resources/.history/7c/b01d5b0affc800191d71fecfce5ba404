/**----------------------------------------------
 * -- Estructuras de Datos.  2018/19
 * -- 2º Curso del Grado en Ingeniería [Informática | del Software | de Computadores].
 * -- Escuela Técnica Superior de Ingeniería en Informática. UMA
 * --
 * -- Examen 4 de febrero de 2019
 * --
 * -- ALUMNO/NAME:
 * -- GRADO/STUDIES:
 * -- NÚM. MÁQUINA/MACHINE NUMBER:
 * --
 * ----------------------------------------------
 */

import dataStructures.graph.WeightedGraph;
import dataStructures.graph.WeightedGraph.WeightedEdge;

import dataStructures.dictionary.Dictionary;
import dataStructures.dictionary.HashDictionary;
import dataStructures.priorityQueue.PriorityQueue;
import dataStructures.priorityQueue.LinkedPriorityQueue;
import dataStructures.set.Set;
import dataStructures.set.HashSet;

public class Kruskal {
	public static <V,W> Set<WeightedEdge<V,W>> kruskal(WeightedGraph<V,W> g) {
		// COMPLETAR
		
		//Inicialización
		Dictionary<V, V> dict = new HashDictionary<>();
		PriorityQueue<WeightedEdge<V,W>> pq = new LinkedPriorityQueue<>();
		Set<WeightedEdge<V,W>> t = new HashSet<>();
		
		for(V v : g.vertices()) {
			dict.insert(v, v);
		}
		
		
		for(WeightedEdge<V,W> we : g.edges()) {
			pq.enqueue(we);
		}
		
		//Inicio del algoritmo
		while(!pq.isEmpty()) {
			WeightedEdge<V,W> we = pq.first();
			pq.dequeue();
			if(!dict.valueOf(we.source()).equals(dict.valueOf(we.destination())))
		}
		
		
		return t;
	}

	// Sólo para evaluación continua / only for part time students
	public static <V,W> Set<Set<WeightedEdge<V,W>>> kruskals(WeightedGraph<V,W> g) {

		// COMPLETAR
		
		return null;
	}
}
