
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 19 12:22:56 CET 2019
//----------------------------------------------------


/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 19 12:22:56 CET 2019
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\006\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\003\007\000\002\003\005\000\002\003\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\017\000\006\004\006\007\005\001\002\000\004\002" +
    "\021\001\002\000\004\002\uffff\001\002\000\006\004\010" +
    "\007\007\001\002\000\006\005\ufffc\006\ufffc\001\002\000" +
    "\006\004\010\007\007\001\002\000\006\005\013\006\012" +
    "\001\002\000\004\007\014\001\002\000\004\002\001\001" +
    "\002\000\004\006\015\001\002\000\006\004\010\007\007" +
    "\001\002\000\006\005\ufffe\006\ufffe\001\002\000\006\005" +
    "\020\006\012\001\002\000\006\005\ufffd\006\ufffd\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\017\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\010\001\001\000\002\001\001" +
    "\000\004\003\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= NUMERO 
            {
              Arbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Arbol a = new Arbol();
           a.raiz=n;
           a.maximo=n;
           a.profundidad=1;
           a.elementos=1;
           a.sumaNivel[0]=n;
           a.arbolInverso=String.valueOf(n);
           a.grafo="";
           RESULT=a;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= ALL exp CLL 
            {
              Arbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbol e = (Arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // exp ::= exp COMA NUMERO COMA exp 
            {
              Arbol RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Arbol e1 = (Arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Arbol e2 = (Arbol)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Arbol a = new Arbol();
           a.raiz=n;
           if(e1.maximo > e2.maximo){
            if(e1.maximo > n){
                a.maximo=e1.maximo;
            }else{
                a.maximo=n;
            }
           }else{
            if(e2.maximo > n){
                a.maximo=e2.maximo;
            }else{
                a.maximo=n;
            }
           }
           if(e1.profundidad >= e2.profundidad){
            a.profundidad=e1.profundidad+1;
           }else{
             a.profundidad=e2.profundidad+1;
           }
           a.elementos=e1.elementos+e2.elementos+1;
           
           a.sumaNivel[0]=n;
	       if(e1.profundidad >= e2.profundidad){
                for(int i=1;i<e1.profundidad+1;i++){
                    if(e2.sumaNivel[i-1]==null){
                        a.sumaNivel[i]=e1.sumaNivel[i-1];
                    }else{
                        a.sumaNivel[i]=e1.sumaNivel[i-1]+e2.sumaNivel[i-1];
                    }
                }
           }else{
                for(int i=1;i<e2.profundidad+1;i++){
                    if(e1.sumaNivel[i-1]==null){
                        a.sumaNivel[i]=e2.sumaNivel[i-1];
                    }else{
                        a.sumaNivel[i]=e1.sumaNivel[i-1]+e2.sumaNivel[i-1];
                    }
                }
           }
           
           a.arbolInverso="{"+e2.arbolInverso+","+String.valueOf(n)+","+e1.arbolInverso+"}";
           a.grafo = e1.grafo+" "+String.valueOf(n)+" -> {"+String.valueOf(e1.raiz)+","+String.valueOf(e2.raiz)+"};"+e2.grafo;
           RESULT=a;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // exp_l ::= NUMERO 
            {
              Arbol RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Arbol a = new Arbol();
             a.raiz=n;
             a.maximo=n;
             a.profundidad=1;
             a.elementos=1;
             a.sumaNivel[0]=n;
             a.arbolInverso=String.valueOf(n);
             a.grafo="";
             RESULT=a;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_l",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= exp_l EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbol start_val = (Arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // exp_l ::= ALL exp CLL 
            {
              Arbol RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arbol e = (Arbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_l",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

